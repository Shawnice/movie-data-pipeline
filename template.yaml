AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  movie-etl-pipeline

  SAM Template for movie-etl-pipeline

Globals:
  Function:
    Timeout: 15
    Tracing: Active
  Api:
    TracingEnabled: true
Parameters:
  BucketName:
    Type: String
    Description: "Bucket name for storing movie data"
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: "Security group for Lambda function"
  LambdaSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "Subnets for Lambda function"
  DBHost:
    Type: String
    Description: "Hostname of database"
  DBName:
    Type: String
    Description: "Database name"
  DBUser:
    Type: String
    Description: "Username for the database"
  DBPassword:
    Type: String
    NoEcho: true
    Description: "Password for the database"
  DBSecretName:
    Type: String
    NoEcho: true
    Description: "Secret name for accessing database password"
  IsProduction:
    Type: String
    Default: false


Resources:
  ReadIMDBFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./src
      Handler: app.lambda_imdb
      Runtime: python3.9
      Architectures:
        - x86_64
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref BucketName
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: arn:aws:secretsmanager:us-east-1:523284507138:secret:rds!db-b5a89a5a-fde7-4f5f-998a-c4a75092ebc5-syvQKY
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds: !Ref LambdaSubnets
      Environment:
        Variables:
          DBHost: !Ref DBHost
          DBName: !Ref DBName
          DBUser: !Ref DBUser
          DBPassword: !Ref DBPassword
          DBSecretName: !Ref DBSecretName
          IsProduction: !Ref IsProduction
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref S3Bucket
            Events: s3:ObjectCreated:*
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - rtb-05d2320144ca39116
      ServiceName: com.amazonaws.us-east-1.s3
      VpcEndpointType: Gateway
      VpcId: vpc-0ddaeaf84380db691
  SecretManagerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: com.amazonaws.us-east-1.secretsmanager
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - sg-09104729db7ba278d
      SubnetIds:
        - subnet-078e924f63f0e27d9
        - subnet-016864cac24d7f1ed
      VpcEndpointType: Interface
      VpcId: vpc-0ddaeaf84380db691
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Join:
          - ''
          - - ApplicationInsights-SAM-
            - Ref: AWS::StackName
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Fn::Join:
          - ''
          - - ApplicationInsights-SAM-
            - Ref: AWS::StackName
      AutoConfigurationEnabled: 'true'
    DependsOn: ApplicationResourceGroup
Outputs:
  ReadIMDBFunction:
    Description: Read IMDB Lambda Function ARN
    Value: !GetAtt ReadIMDBFunction.Arn
  ReadIMDBFunctionIamRole:
    Description: Implicit IAM Role created for Read IMDB function
    Value: !GetAtt ReadIMDBFunctionRole.Arn
